@model ChatApp.MVC.Models.ChatViewModel
@using System.Security.Claims

@{
    ViewBag.Title = Model.Name;
    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<!-- External dependencies -->
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" asp-append-version="true" />
<link href="~/css/chat.css" rel="stylesheet" asp-append-version="true" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js" asp-append-version="true"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js" asp-append-version="true"></script>

<div class="container">
    <div class="content container-fluid bootstrap snippets bootdey">
        <div class="row row-broken">
            <div class="col-12 chat" style="overflow-y: auto; outline: none; height: calc(100vh - 150px);" tabindex="5001">
                <div class="col-inside-lg decor-modern">
                    <div class="chat-body" id="chatBody">
                        <h6 class="chat-header">@ViewBag.Title</h6>
                        @foreach (var message in ViewBag.Messages ?? Enumerable.Empty<dynamic>())
                        {
                            <div class="answer @(message.SenderId == currentUserId ? "right" : "left")">
                                <div class="name fw-bold text-primary">@message.Sender.DisplayName</div>
                                <div class="text bg-light p-2 rounded">@message.MessageText</div>
                                <div class="time text-muted small">@message.Date.ToString("hh:mm tt")</div>
                            </div>
                        }
                        <div id="scroll-anchor" class="scroll-anchor"></div>
                    </div>
                </div>
            </div>
            <div class="answer-add mt-3 d-flex">
                <input id="messageInput" class="form-control rounded-pill" placeholder="Write a message" />
                <button id="sendMessageBtn" class="btn btn-primary rounded-pill ms-2" disabled>
                    <i class="fa fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Chat SignalR Logic -->
<script>
    const currentUserId = '@currentUserId';
    const chatId = '@Model.Id';

    function scrollToBottom() {
        const anchor = document.getElementById("scroll-anchor");
        if (anchor) {
            anchor.scrollIntoView({ behavior: 'smooth' });
        }
    }

    function escapeHtml(unsafe) {
        if (!unsafe) return '';
        return unsafe.toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .withAutomaticReconnect({
            nextRetryDelayInMilliseconds: retryContext => {
                if (retryContext.elapsedMilliseconds < 60000) {
                    return Math.random() * 2000 + 1000;
                }
                return null;
            }
        })
        .build();

    connection.onclose(() => {
        const sendBtn = document.getElementById("sendMessageBtn");
        if (sendBtn) {
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<i class="fa fa-sync-alt"></i> Reconnecting...';
        }
    });

    connection.onreconnected(() => {
        const sendBtn = document.getElementById("sendMessageBtn");
        if (sendBtn) {
            sendBtn.disabled = false;
            sendBtn.innerHTML = '<i class="fa fa-paper-plane"></i>';
            connection.invoke("JoinChat", chatId).catch(err => console.error("JoinChat failed:", err));
        }
    });

    connection.on("ReceiveMessage", function (chatIdFromHub, senderId, messageText, timestamp, displayName) {
        if (chatIdFromHub !== chatId) return;

        const isMine = senderId === currentUserId;
        const chatBody = document.getElementById("chatBody");
        if (chatBody) {
            const html = `
                <div class="answer ${isMine ? "right" : "left"}">
                    <div class="name fw-bold text-primary">${escapeHtml(displayName)}</div>
                    <div class="text bg-light p-2 rounded">${escapeHtml(messageText)}</div>
                    <div class="time text-muted small">${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                </div>`;
            
            // Insert before the scroll anchor to maintain proper order
            const anchor = document.getElementById("scroll-anchor");
            if (anchor) {
                anchor.insertAdjacentHTML("beforebegin", html);
            } else {
                chatBody.insertAdjacentHTML("beforeend", html);
            }
            
            scrollToBottom();
        }
    });

    // Initialize chat and scroll to bottom
    document.addEventListener('DOMContentLoaded', function() {
        scrollToBottom();
    });

    connection.start().then(() => {
        console.log("SignalR connected.");
        const sendBtn = document.getElementById("sendMessageBtn");
        if (sendBtn) {
            sendBtn.disabled = false;
            sendBtn.innerHTML = '<i class="fa fa-paper-plane"></i>';
        }
        return connection.invoke("JoinChat", chatId);
    }).then(() => {
        console.log("Joined chat successfully");
        scrollToBottom();
    }).catch(err => {
        console.error("SignalR connection failed:", err);
        const sendBtn = document.getElementById("sendMessageBtn");
        if (sendBtn) {
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<i class="fa fa-exclamation-circle"></i> Connection Failed';
        }
    });

    function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const sendBtn = document.getElementById("sendMessageBtn");
        const messageText = messageInput.value.trim();
        if (!messageText) return;

        sendBtn.disabled = true;
        sendBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
        
        connection.invoke("SendMessage", chatId, messageText)
            .then(() => {
                messageInput.value = "";
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fa fa-paper-plane"></i>';
                scrollToBottom();
            })
            .catch(err => {
                console.error("Send message failed:", err);
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fa fa-paper-plane"></i>';
                alert("Failed to send message. Please try again.");
            });
    }

    document.getElementById("sendMessageBtn").addEventListener("click", sendMessage);
    document.getElementById("messageInput").addEventListener("keydown", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
</script>