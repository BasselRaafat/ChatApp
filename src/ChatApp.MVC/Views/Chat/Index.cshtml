@model ChatApp.Core.Entities.Chat
@using System.Security.Claims

@{
ViewBag.Title = "Chat: " + Model.Name;
var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<!-- External dependencies -->
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<div class="container">
    <div class="content container-fluid bootstrap snippets bootdey">
        <div class="row row-broken">
            <!-- Online users (optional) -->
            <div class="col-sm-3 col-xs-12">
                <div class="col-inside-lg decor-default chat" tabindex="5000">
                    <div class="chat-users">
                        <h6>Online</h6>
                        @foreach (var user in ViewBag.OnlineUsers ?? Enumerable.Empty<dynamic>())
                        {
                            <div class="user">
                                <div class="avatar">
                                    <img src="@user.AvatarUrl" alt="@user.Name" />
                                    <div class="status @(user.Status.ToLower())"></div>
                                </div>
                                <div class="name">@user.Name</div>
                                <div class="mood">@user.Mood</div>
                        </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Chat messages and input -->
            <div class="col-sm-9 col-xs-12 chat" tabindex="5001">
                <div class="col-inside-lg decor-default">
                    <div class="chat-body" id="chatBody">
                        <h6>Mini Chat</h6>

                        @foreach (var message in ViewBag.Messages ?? Enumerable.Empty<ChatApp.Core.Entities.ChatMessage>())
                        {
                        <div class="answer @(message.SenderId == currentUserId ? "right" : "left")">
                            <div class="avatar">
                                <img src="@(message.SenderId == currentUserId ? "/images/user2.png" : "/images/user1.png")" />
                            </div>
                            <div class="text">@message.MessageText</div>
                            <div class="time">@message.Date.ToString("hh:mm tt")</div>
                        </div>
                        }

                        <div class="answer-add mt-3 d-flex">
                            <input id="messageInput" class="form-control" placeholder="Write a message" />
                            <button id="sendMessageBtn" class="btn btn-primary ms-2">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SignalR and Chat JS -->
<script>
    const currentUserId = '@currentUserId';
    const chatId = '@Model.Id';

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.on("ReceiveMessage", function (chatIdFromHub, senderId, messageText, timestamp) {
        if (chatIdFromHub !== chatId) return;

        const isMine = senderId === currentUserId;
        const html = `
            <div class="answer ${isMine ? "right" : "left"}">
                <div class="avatar">
                    <img src="${isMine ? "/images/user2.png" : "/images/user1.png"}" />
                </div>
                <div class="text">${messageText}</div>
                <div class="time">${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
            </div>`;
        document.getElementById("chatBody").insertAdjacentHTML("beforeend", html);
    });

    connection.start().then(() => {
        console.log("SignalR connected.");
        connection.invoke("JoinChat", chatId);
    }).catch(err => console.error(err.toString()));

    document.getElementById("sendMessageBtn").addEventListener("click", function () {
        const messageInput = document.getElementById("messageInput");
        const messageText = messageInput.value.trim();
        if (!messageText) return;

        connection.invoke("SendMessage", chatId, messageText)
            .then(() => messageInput.value = "")
            .catch(err => console.error(err.toString()));
    });
</script>

<style>
    .chat-body {
        max-height: 500px;
        overflow-y: auto;
    }

    .answer {
        margin-bottom: 15px;
    }

    .answer.right {
        text-align: right;
    }

    .answer.left {
        text-align: left;
    }

    .avatar img {
        width: 40px;
        border-radius: 50%;
    }

    .text {
        display: inline-block;
        padding: 8px 12px;
        border-radius: 15px;
        background: #f1f1f1;
        margin: 5px;
    }

    .answer.right .text {
        background: #d1ecf1;
    }

    .time {
        font-size: 0.8em;
        color: gray;
    }
</style>
